<?php
/**
 * @file
 * Headless Authoring eXperience, all we do is accept calls and make things haxable in the first place.
 */

/**
 * Implements hook_permission().
 */
function hax_permission() {
  return array(
    'use hax' =>  array(
      'title' => t('Use HAX editor'),
      'description' => t('Advanced authoring experience that is pulled in from hax capable web components.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function hax_menu() {
  $items['hax-node-save/%node/%'] = array(
    'page callback' => '_hax_node_save',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'access callback' => '_hax_node_access',
    'access arguments' => array('update', 1),
  );
  $items['hax-app-store/%'] = array(
    'page callback' => '_hax_load_app_store',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  $items['node/%node/hax'] = array(
    'title' => 'HAX mode',
    'description' => 'Edit the node with HAX',
    'page callback' => '_hax_node_form',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'access callback' => '_hax_node_access',
    'access arguments' => array('update', 1),
  );
  $items['admin/config/content/hax'] = array(
    'title' => 'HAX',
    'description' => 'Settings for basic customizations to HAX.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hax_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function hax_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && variable_get('hax_autoload_element_node_view', TRUE)) {
    // generate autoload list
    $elementstring = variable_get('hax_autoload_element_list', 'video-player wikipedia-query pdf-element lrn-table media-image');
    // blow up based on space
    $elements = explode(' ', $elementstring);
    foreach ($elements as $element) {
      $component = new stdClass();
      $component->machine_name = $element;
      // pull in from webcomponents location
      $component->file = libraries_get_path('webcomponents') . '/polymer/bower_components/' . $element . '/' . $element . '.html';
      _webcomponents_add_to_head($component, 10001);
    }
  }
}

/**
 * Callback to save just the body field.
 */
function _hax_node_save($node, $token) {
  // ensure we had data PUT here and it is valid
  if ($_SERVER['REQUEST_METHOD'] == 'PUT' && drupal_valid_token($token, 'hax')) {
    // load the data from input stream
    $body = file_get_contents("php://input");
    $node->body['und'][0]['value'] = $body;
    node_save($node);
    // send back happy headers
    drupal_add_http_header('Content-Type', 'application/json');
    // define status
    drupal_add_http_header('Status', 200);
    $return = array(
      'status' => 200,
      'message' => t('Save successful!'),
      'data' => $node,
    );
    // output the response as json
    print drupal_json_output($return);
  }
}

/**
 * Callback to assemble the hax app store
 */
function _hax_load_app_store($token) {
  // ensure we had data PUT here and it is valid
  if (drupal_valid_token($token, 'hax')) {
    $appStore = module_invoke_all('hax_app_store');
    drupal_alter('hax_app_store', $appStore);
    // send back happy headers
    drupal_add_http_header('Content-Type', 'application/json');
    // define status
    drupal_add_http_header('Status', 200);
    $return = array(
      'status' => 200,
      'apps' => $appStore,
    );
    // output the response as json
    print drupal_json_output($return);
  }
}

/**
 * Permission + Node access check.
 */
function _hax_node_access($op, $node) {
  if (user_access('use hax') && node_access($op, $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Present the node form but wrap the content in hax-body tag
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function _hax_node_form($node) {
  // set page title
  drupal_set_title(t('HAX edit @title', array('@title' => $node->title)), PASS_THROUGH);
  // fake a component to get it into the head of the document, heavy weighting
  $component = new stdClass();
  $component->machine_name = 'cms-hax';
  // pull in from webcomponents location
  $component->file = libraries_get_path('webcomponents') . '/polymer/bower_components/cms-hax/cms-hax.html';
  _webcomponents_add_to_head($component, 10000);
  // generate autoload list
  $elementstring = variable_get('hax_autoload_element_list', 'video-player wikipedia-query pdf-element lrn-table media-image');
  // blow up based on space
  $elements = explode(' ', $elementstring);
  $components = '';
  foreach ($elements as $element) {
    // sanity check
    if (!empty($element)) {
      $components .= '<' . $element . ' slot="autoloader">' . '</' . $element . '>';
    }
  }
  $appStoreConnection = array(
    'url' => base_path() . 'hax-app-store/' . drupal_get_token('hax'),
  );
  // write content to screen, wrapped in tag to do all the work
  $content = '
  <cms-hax open-default end-point="' . base_path() . 'hax-node-save/' . $node->nid . '/' . drupal_get_token('hax') . '" body-offset-left="' . variable_get('hax_offset_left', 0) . '" app-store-connection=' . "'" . json_encode($appStoreConnection) . "'" . '>'
  . $components .
    check_markup($node->body['und'][0]['value'], $node->body['und'][0]['format'])
  .'</cms-hax>';
  return $content;
}

/**
 * Helper function to make outline designer settings more obvious.
 */
function hax_settings($form, &$form_state) {
  $form['hax_offset_left'] = array(
    '#type' => 'textfield',
    '#title' => t('Offset'),
    '#default_value' => variable_get('hax_offset_left', 0),
    '#description' => "Helps with theme compatibility when positioning the context menu. Adjust this if HAX context menu doesn't correctly align with the side of your content when editing. Value is in pixels but should not include px. Some themes that mess with box-model may or may not have this issue.",
  );
  // collapse default state
  $form['hax_autoload_element_list'] = array(
    '#type' => 'textfield',
    '#title' => t('Elements to autoload'),
    '#default_value' => variable_get('hax_autoload_element_list', 'video-player wikipedia-query pdf-element lrn-table media-image'),
    '#description' => "This allows for auto-loading elements known to play nice with HAX. If you've written any webcomponents that won't automatically be loaded into the page via that module this allows you to attempt to auto-load them when HAX loads. For example, if you have a video-player element in your bower_components directory and want it to load on this interface, this would be a simple way to do that. Spaces only between elements, no comma",
  );
  $form['hax_yt_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Youtube API key'),
    '#default_value' => variable_get('hax_yt_key', ''),
    '#description' => 'See ' . l(t('YouTube developer docs'), 'https://developers.google.com/youtube/v3/getting-started') . ' for details.',
  );
  $form['hax_memegen_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Meme generator API key'),
    '#default_value' => variable_get('hax_memegen_key', ''),
    '#description' => 'See ' . l(t('Meme generator developer docs'), 'https://memegenerator.net/Api') . ' for details.',
  );
  $form['hax_vimeo_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Vimeo API key'),
    '#default_value' => variable_get('hax_vimeo_key', ''),
    '#description' => 'See ' . l(t('Vimeo developer docs'), 'https://developer.vimeo.com/') . ' for details.',
  );
  $form['hax_giphy_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Giphy API key'),
    '#default_value' => variable_get('hax_giphy_key', ''),
    '#description' => 'See ' . l(t('Giphy developer docs'), 'https://developers.giphy.com/docs/') . ' for details.',
  );
  $form['hax_unsplash_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Unsplash API key'),
    '#default_value' => variable_get('hax_unsplash_key', ''),
    '#description' => 'See ' . l(t('Unsplash developer docs'), 'https://unsplash.com/developers') . ' for details.',
  );
  $form['hax_flickr_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Flickr API key'),
    '#default_value' => variable_get('hax_flickr_key', ''),
    '#description' => 'See ' . l(t('Flickr developer docs'), 'https://www.flickr.com/services/developer/api/') . ' for details.',
  );
  $form['hax_pixabay_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Pixabay API key'),
    '#default_value' => variable_get('hax_pixabay_key', ''),
    '#description' => 'See ' . l(t('Pixabay developer docs'), 'https://pixabay.com/api/docs/') . ' for details.',
  );
  return system_settings_form($form);
}

/**
 * Implements hook_hax_app_store().
 */
function hax_hax_app_store() {
  $json = array();
  // youtube
  if (variable_get('hax_yt_key', '') != '') {
    $jsonstring = '{
      "details": {
        "title": "Youtube",
        "icon": "av:play-arrow",
        "color": "red",
        "author": "Google, Youtube LLC",
        "description": "The most popular online video sharing and remix site.",
        "status": "available",
        "tags": ["video", "crowdsourced"]
      },
      "connection": {
          "protocol": "https",
          "url": "www.googleapis.com/youtube/v3",
          "data": {
            "key": "' . variable_get('hax_yt_key', '') . '"
          },
          "operations": {
            "browse": {
              "method": "GET",
              "endPoint": "search",
              "pagination": {
                "style": "page",
                "props": {
                  "previous": "prevPageToken",
                  "next": "nextPageToken",
                  "total_items": "pageInfo.totalResults"
                }
              },
              "search": {
                "q": {
                  "title": "Search",
                  "type": "string"
                }
              },
              "data": {
                "part": "snippet",
                "type": "video",
                "maxResults": "20"
              },

                "url": "https://www.youtube.com/watch?v=",

              "resultMap": {
                "defaultGizmoType": "video",
                "items": "items",
                "preview": {
                  "title": "snippet.title",
                  "details": "snippet.description",
                  "image": "snippet.thumbnails.default.url",
                  "id": "id.videoId"
                },
                "gizmo": {
                  "title": "snippet.title",
                  "description": "snippet.description",
                  "id": "id.videoId",
                  "_url_source": "https://www.youtube.com/watch?v=<%= id %>",
                  "caption": "snippet.description",
                  "citation": "snippet.channelTitle"
                }
              }
            }
          }
      }
    }';
    $tmp = json_decode($jsonstring);
    array_push($json, $tmp);
  }
  // memegenerator
  if (variable_get('hax_memegen_key', '') != '') {
    $jsonstring = '{
      "details": {
        "title": "Meme generator",
        "icon": "android",
        "color": "blue",
        "author": "Meme generator",
        "description": "A search engine of popular memes.",
        "status": "available",
        "tags": ["picture", "crowdsourced", "image", "meme"]
      },
      "connection": {
        "protocol": "http",
        "url": "version1.api.memegenerator.net",
        "data": {
          "apiKey": "' . variable_get('hax_memegen_key', '') . '"
        },
        "operations": {
          "browse": {
            "method": "GET",
            "endPoint": "Generators_Search",
            "pagination": {
              "style": "page",
              "props": {
                "previous": "prevPageToken",
                "next": "nextPageToken",
                "total_items": "pageInfo.totalResults"
              }
            },
            "search": {
              "q": {
                "title": "Search",
                "type": "string"
              }
            },
            "data": {
              "pageIndex":"0",
              "pageSize":"20"
            },
            "resultMap": {
              "defaultGizmoType": "image",
              "items": "result",
              "preview": {
                "title": "displayName",
                "details": "",
                "image": "imageUrl",
                "id": "imageID"
              },
              "gizmo": {
                "title": "displayName",
                "id": "imageID",
                "source": "imageUrl"
              }
            }
          }
        }
      }
    }';
    $tmp = json_decode($jsonstring);
    array_push($json, $tmp);
  }
  // vimeo
  if (variable_get('hax_vimeo_key', '') != '') {
    $jsonstring = '{
      "details": {
        "title": "Vimeo",
        "icon": "av:play-circle-filled",
        "color": "blue",
        "author": "Vimeo Inc.",
        "description": "A high quality video sharing community.",
        "status": "available",
        "tags": ["video", "crowdsourced"]
      },
      "connection": {
        "protocol": "https",
        "url": "api.vimeo.com",
        "data": {
          "access_token": "' . variable_get('hax_vimeo_key', '') . '"
        },
        "operations": {
          "browse": {
            "method": "GET",
            "endPoint": "videos",
            "pagination": {
              "style": "link",
              "props": {
                "first": "paging.first",
                "next": "paging.next",
                "previous": "paging.previous",
                "last": "paging.last"
              }
            },
            "search": {
              "query": {
                "title": "Search",
                "type": "string"
              }
            },
            "data": {
              "direction": "asc",
              "sort": "alphabetical",
              "filter": "CC",
              "per_page": "20"
            },
            "resultMap": {
              "defaultGizmoType": "video",
              "items": "data",
              "preview": {
                "title": "name",
                "details": "description",
                "image": "pictures.sizes.1.link",
                "id": "id"
              },
              "gizmo": {
                "_url_source": "https://vimeo.com<%= id %>",
                "id": "uri",
                "title": "title",
                "caption": "description",
                "description": "description",
                "citation": "user.name"
              }
            }
          }
        }
      }
    }';
    $tmp = json_decode($jsonstring);
    array_push($json, $tmp);
  }
  // giphy
  if (variable_get('hax_giphy_key', '') != '') {
    $jsonstring = '{
      "details": {
        "title": "Giphy",
        "icon": "gif",
        "color": "green",
        "author": "Giphy",
        "description": "Crowd sourced memes via animated gifs.",
        "status": "available",
        "tags": ["gif", "crowdsourced", "meme"]
      },
      "connection": {
        "protocol": "https",
        "url": "api.giphy.com",
        "data": {
          "api_key": "' . variable_get('hax_giphy_key', '') . '"
        },
        "operations": {
          "browse": {
            "method": "GET",
            "endPoint": "v1/gifs/search",
            "pagination": {
              "style": "offset",
              "props": {
                "offset": "pagination.offset",
                "total": "pagination.total_count",
                "count": "pagination.count"
              }
            },
            "search": {
              "q": {
                "title": "Search",
                "type": "string"
              },
              "rating": {
                "title": "Rating",
                "type": "string",
                "component": {
                  "name": "dropdown-select",
                  "slot": "<paper-item value=\'Y\'>Y</paper-item><paper-item value=\'G\'>G</paper-item><paper-item value=\'PG\'>PG</paper-item><paper-item value=\'PG-13\'>PG-13</paper-item><paper-item value=\'R\'>R</paper-item>"
                }
              },
              "lang": {
                "title": "Language",
                "type": "string",
                "component": {
                  "name": "dropdown-select",
                  "slot": "<paper-item value=\'en\'>en</paper-item><paper-item value=\'es\'>es</paper-item><paper-item value=\'pt\'>pt</paper-item><paper-item value=\'id\'>id</paper-item><paper-item value=\'fr\'>fr</paper-item><paper-item value=\'ar\'>ar</paper-item><paper-item value=\'tr\'>tr</paper-item><paper-item value=\'th\'>th</paper-item><paper-item value=\'vi\'>vi</paper-item><paper-item value=\'de\'>de</paper-item><paper-item value=\'it\'>it</paper-item><paper-item value=\'ja\'>ja</paper-item><paper-item value=\'zh-CN\'>zh-CN</paper-item><paper-item value=\'zh-TW\'>zh-TW</paper-item><paper-item value=\'ru\'>ru</paper-item><paper-item value=\'ko\'>ko</paper-item><paper-item value=\'pl\'>pl</paper-item><paper-item value=\'nl\'>nl</paper-item><paper-item value=\'ro\'>ro</paper-item><paper-item value=\'hu\'>hu</paper-item><paper-item value=\'sv\'>sv</paper-item><paper-item value=\'cs\'>cs</paper-item><paper-item value=\'hi\'>hi</paper-item><paper-item value=\'bn\'>bn</paper-item><paper-item value=\'da\'>da</paper-item><paper-item value=\'fa\'>fa</paper-item><paper-item value=\'tl\'>tl</paper-item><paper-item value=\'fi\'>fi</paper-item><paper-item value=\'iw\'>iw</paper-item><paper-item value=\'ms\'>ms</paper-item><paper-item value=\'no\'>no</paper-item><paper-item value=\'uk\'>uk</paper-item>"
                }
              }
            },
            "data": {
              "limit": "20",
              "lang": "en"
            },
            "resultMap": {
              "defaultGizmoType": "image",
              "items": "data",
              "preview": {
                "title": "title",
                "details": "description",
                "image": "images.preview_gif.url",
                "id": "id"
              },
              "gizmo": {
                "source": "images.original.url",
                "source2": "images.480w_still.url",
                "id": "id",
                "title": "title",
                "alt": "title",
                "caption": "user.display_name",
                "citation": "user.display_name"
              }
            }
          }
        }
      }
    }';
    $tmp = json_decode($jsonstring);
    array_push($json, $tmp);
  }
  // unsplash
  if (variable_get('hax_unsplash_key', '') != '') {
    $jsonstring = '{
      "details": {
        "title": "Unsplash",
        "icon": "image:collections",
        "color": "grey",
        "author": "Unsplash",
        "description": "Crowd sourced, open photos",
        "status": "available",
        "tags": ["images", "crowdsourced", "cc"]
      },
      "connection": {
        "protocol": "https",
        "url": "api.unsplash.com",
        "data": {
          "client_id": "' . variable_get('hax_unsplash_key', '') . '"
        },
        "operations": {
          "browse": {
            "method": "GET",
            "endPoint": "search/photos",
            "pagination": {
              "style": "link",
              "props": {
                "first": "paging.first",
                "next": "paging.next",
                "previous": "paging.previous",
                "last": "paging.last"
              }
            },
            "search": {
              "query": {
                "title": "Search",
                "type": "string"
              }
            },
            "data": {
            },
            "resultMap": {
              "defaultGizmoType": "image",
              "items": "results",
              "preview": {
                "title": "",
                "details": "description",
                "image": "urls.thumb",
                "id": "id"
              },
              "gizmo": {
                "id": "id",
                "source": "urls.regular",
                "alt": "description",
                "caption": "description",
                "citation": "user.name"
              }
            }
          }
        }
      }
    }';
    $tmp = json_decode($jsonstring);
    array_push($json, $tmp);
  }
  // flickr
  if (variable_get('hax_flickr_key', '') != '') {
    $jsonstring = '{
      "details": {
        "title": "Flickr",
        "icon": "image:collections",
        "color": "pink",
        "author": "Yahoo",
        "description": "The original photo sharing platform on the web.",
        "status": "available",
        "rating": "0",
        "tags": ["images", "creative commons", "crowdsourced"]
      },
      "connection": {
        "protocol": "https",
        "url": "api.flickr.com",
        "data": {
          "api_key": "' . variable_get('hax_flickr_key', '') . '"
        },
        "operations": {
          "browse": {
            "method": "GET",
            "endPoint": "services/rest",
            "pagination": {
              "style": "page",
              "props": {
                "per_page": "photos.perpage",
                "total_pages": "photos.pages",
                "page": "photos.page"
              }
            },
            "search": {
              "text": {
                "title": "Search",
                "type": "string"
              },
              "safe_search": {
                "title": "Safe results",
                "type": "string",
                "value": "1",
                "component": {
                  "name": "dropdown-select",
                  "valueProperty": "value",
                  "slot": "<paper-item value=\'1\'>Safe</paper-item><paper-item value=\'2\'>Moderate</paper-item><paper-item value=\'3\'>Restricted</paper-item>"
                }
              },
              "license": {
                "title": "License type",
                "type": "string",
                "value": "",
                "component": {
                  "name": "dropdown-select",
                  "valueProperty": "value",
                  "slot": "<paper-item value=\'\'>Any</paper-item><paper-item value=\'0\'>All Rights Reserved</paper-item><paper-item value=\'4\'>Attribution License</paper-item><paper-item value=\'6\'>Attribution-NoDerivs License</paper-item><paper-item value=\'3\'>Attribution-NonCommercial-NoDerivs License</paper-item><paper-item value=\'2\'>Attribution-NonCommercial License</paper-item><paper-item value=\'1\'>Attribution-NonCommercial-ShareAlike License</paper-item><paper-item value=\'5\'>Attribution-ShareAlike License</paper-item><paper-item value=\'7\'>No known copyright restrictions</paper-item><paper-item value=\'8\'>United States Government Work</paper-item><paper-item value=\'9\'>Public Domain Dedication (CC0)</paper-item><paper-item value=\'10\'>Public Domain Mark</paper-item>"
                }
              }
            },
            "data": {
              "method": "flickr.photos.search",
              "safe_search": "1",
              "format": "json",
              "per_page": "20",
              "nojsoncallback": "1",
              "extras": "license,description,url_l,url_s"
            },
            "resultMap": {
              "defaultGizmoType": "image",
              "items": "photos.photo",
              "preview": {
                "title": "title",
                "details": "description._content",
                "image": "url_s",
                "id": "id"
              },
              "gizmo": {
                "title": "title",
                "source": "url_l",
                "alt": "description._content"
              }
            }
          }
        }
      }
    }';
    $tmp = json_decode($jsonstring);
    array_push($json, $tmp);
  }
  // pixabay
  if (variable_get('hax_pixabay_key', '') != '') {
    $jsonstring = '{
      "details": {
        "title": "Pixabay images",
        "icon": "places:all-inclusive",
        "color": "orange",
        "author": "Pixabay",
        "description": "Pixabay open image community",
        "status": "available",
        "tags": ["images", "crowdsourced"]
      },
      "connection": {
        "protocol": "https",
        "url": "pixabay.com",
        "data": {
          "key": "' . variable_get('hax_pixabay_key', '') . '"
        },
        "operations": {
          "browse": {
            "method": "GET",
            "endPoint": "api",
            "pagination": {
              "style": "page",
              "props": {
                "total_items": "totalHits",
                "page": "page"
              }
            },
            "search": {
              "q": {
                "title": "Search",
                "type": "string"
              }
            },
            "data": {
              "image_type": "photo"
            },
            "resultMap": {
              "defaultGizmoType": "image",
              "items": "hits",
              "preview": {
                "title": "tags",
                "details": "user",
                "image": "previewURL",
                "id": "id"
              },
              "gizmo": {
                "source": "webformatURL",
                "id": "uri",
                "title": "tags",
                "caption": "tags",
                "citation": "user.name"
              }
            }
          }
        }
      }
    }';
    $tmp = json_decode($jsonstring);
    array_push($json, $tmp);
  }
  // nasa
  $jsonstring = '{
    "details": {
      "title": "NASA",
      "icon": "places:all-inclusive",
      "color": "blue",
      "author": "US Government",
      "description": "The cozmos through one simple API.",
      "status": "available",
      "tags": ["images", "government", "space"]
    },
    "connection": {
      "protocol": "https",
      "url": "images-api.nasa.gov",
      "operations": {
        "browse": {
          "method": "GET",
          "endPoint": "search",
          "pagination": {
            "style": "page",
            "props": {
              "page": "page"
            }
          },
          "search": {
            "q": {
              "title": "Search",
              "type": "string"
            }
          },
          "data": {
            "media_type": "image"
          },
          "resultMap": {
            "defaultGizmoType": "image",
            "items": "collection.items",
            "preview": {
              "title": "data.0.title",
              "details": "data.0.description",
              "image": "links.0.href",
              "id": "links.0.href"
            },
            "gizmo": {
              "id": "links.0.href",
              "source": "links.0.href",
              "title": "data.0.title",
              "caption": "data.0.description",
              "description": "data.0.description",
              "citation": "data.0.photographer",
              "type": "data.0.media_type"
            }
          }
        }
      }
    }
  }';
  $tmp = json_decode($jsonstring);
  array_push($json, $tmp);
  // sketchfab
  $jsonstring = '{
    "details": {
      "title": "Sketchfab",
      "icon": "icons:3d-rotation",
      "color": "purple",
      "author": "Sketchfab",
      "description": "3D sharing community.",
      "status": "available",
      "rating": "0",
      "tags": ["3D", "creative commons", "crowdsourced"]
    },
    "connection": {
      "protocol": "https",
      "url": "api.sketchfab.com",
      "data": {
        "type": "models"
      },
      "operations": {
        "browse": {
          "method": "GET",
          "endPoint": "v3/search",
          "pagination": {
            "style": "page",
            "props": {
              "per_page": "photos.perpage",
              "total_pages": "photos.pages",
              "page": "photos.page"
            }
          },
          "search": {
            "q": {
              "title": "Search",
              "type": "string"
            },
            "license": {
              "title": "License type",
              "type": "string",
              "value": "",
              "component": {
                "name": "dropdown-select",
                "valueProperty": "value",
                "slot": "<paper-item value=\'\'>Any</paper-item><paper-item value=\'by\'>Attribution</paper-item><paper-item value=\'by-sa\'>Attribution ShareAlike</paper-item><paper-item value=\'by-nd\'>Attribution NoDerivatives</paper-item><paper-item value=\'by-nc\'>Attribution-NonCommercial</paper-item><paper-item value=\'by-nc-sa\'>Attribution NonCommercial ShareAlike</paper-item><paper-item value=\'by-nc-nd\'>Attribution NonCommercial NoDerivatives</paper-item><paper-item value=\'cc0\'>Public Domain Dedication (CC0)</paper-item>"
              }
            }
          },
          "resultMap": {
            "defaultGizmoType": "video",
            "items": "results",
            "preview": {
              "title": "name",
              "details": "description._content",
              "image": "thumbnails.images.2.url",
              "id": "uid"
            },
            "gizmo": {
              "title": "name",
              "source": "embedUrl",
              "alt": "description"
            }
          }
        }
      }
    }
  }';
  $tmp = json_decode($jsonstring);
  array_push($json, $tmp);
  // dailymotion
  $jsonstring = '{
    "details": {
      "title": "Dailymotion",
      "icon": "av:play-circle-filled",
      "color": "blue",
      "author": "Dailymotion",
      "description": "A crowdsourced video platform that is ad supported.",
      "status": "available",
      "tags": ["video", "crowdsourced"]
    },
    "connection": {
      "protocol": "https",
      "url": "api.dailymotion.com",
      "operations": {
        "browse": {
          "method": "GET",
          "endPoint": "videos",
          "pagination": {
            "style": "page",
            "props": {
              "total_items": "total",
              "total_pages": "total_pages",
              "page": "page"
            }
          },
          "search": {
            "search": {
              "title": "Search",
              "type": "string"
            }
          },
          "data": {
            "fields":"description,embed_url,thumbnail_240_url,title,id",
            "no_live":"1",
            "ssl_assets":"true",
            "sort":"relevance",
            "limit":"20"
          },
          "resultMap": {
            "defaultGizmoType": "video",
            "items": "list",
            "preview": {
              "title": "title",
              "details": "description",
              "image": "thumbnail_240_url",
              "id": "id"
            },
            "gizmo": {
              "title": "title",
              "description": "description",
              "source": "embed_url",
              "alt": "description",
              "caption": "description"
            }
          }
        }
      }
    }
  }';
  $tmp = json_decode($jsonstring);
  array_push($json, $tmp);
  // wikipedia
  $jsonstring = '{
    "details": {
      "title": "Wikipedia",
      "icon": "account-balance",
      "color": "grey",
      "author": "Wikimedia",
      "description": "Encyclopedia of the world.",
      "status": "available",
      "tags": ["content", "encyclopedia", "wiki"]
    },
    "connection": {
      "protocol": "https",
      "url": "en.wikipedia.org",
      "data": {
        "action":"query",
        "list":"search",
        "format":"json"
      },
      "operations": {
        "browse": {
          "method": "GET",
          "endPoint": "w/api.php",
          "pagination": {
            "style": "offset",
            "props": {
              "offset": "sroffset"
            }
          },
          "search": {
            "srsearch": {
              "title": "Search",
              "type": "string"
            }
          },
          "data": {
          },
          "resultMap": {
            "defaultGizmoType": "content",
            "items": "query.search",
            "preview": {
              "title": "title",
              "details": "snippet",
              "image": "pageid",
              "id": "pageid"
            },
            "gizmo": {
              "_url_source": "https://en.wikipedia.org/wiki/<%= id %>",
              "id": "title",
              "title": "title",
              "caption": "snippet",
              "description": "snippet"
            }
          }
        }
      }
    }
  }';
  $tmp = json_decode($jsonstring);
  array_push($json, $tmp);
  // cc-mixter
  $jsonstring = '{
    "details": {
      "title": "CC Mixter",
      "icon": "av:library-music",
      "color": "purple",
      "author": "CC Mixter",
      "description": "User submitted audio files and music.",
      "status": "available",
      "tags": ["audio", "crowdsourced"]
    },
    "connection": {
      "protocol": "http",
      "url": "ccmixter.org",
      "data": {
        "format":"json",
        "sort":"name",
        "limit":"20"
      },
      "operations": {
        "browse": {
          "method": "GET",
          "endPoint": "api/query",
          "pagination": {
            "style": "link",
            "props": {
              "first": "paging.first",
              "next": "paging.next",
              "previous": "paging.previous",
              "last": "paging.last"
            }
          },
          "search": {
            "tags": {
              "title": "Search",
              "type": "string"
            }
          },
          "data": {
            "direction": "asc",
            "sort": "alphabetical",
            "filter": "CC",
            "per_page": "20"
          },
          "resultMap": {
            "defaultGizmoType": "audio",
            "items": "",
            "preview": {
              "title": "upload_name",
              "details": "upload_description_plain",
              "image": "license_logo_url",
              "id": "upload_id"
            },
            "gizmo": {
              "source": "files.0.download_url",
              "id": "upload_id",
              "title": "upload_name",
              "caption": "upload_description_plain",
              "description": "upload_description_plain",
              "citation": "license_name"
            }
          }
        }
      }
    }
  }';
  $tmp = json_decode($jsonstring);
  array_push($json, $tmp);
  // codepen
  $jsonstring = '{
    "details": {
      "title": "Codepen.io",
      "icon": "code",
      "color": "green",
      "author": "Code pen",
      "description": "HTML / CSS / JS sharing community",
      "status": "available",
      "rating": "0",
      "tags": ["code", "development", "html", "js", "crowdsourced"]
    },
    "connection": {
      "protocol": "https",
      "url": "cpv2api.com",
      "operations": {
        "browse": {
          "method": "GET",
          "endPoint": "search/pens",
          "pagination": {
            "style": "page",
            "props": {
              "per_page": "photos.perpage",
              "total_pages": "photos.pages",
              "page": "photos.page"
            }
          },
          "search": {
            "q": {
              "title": "Search",
              "type": "string"
            }
          },
          "resultMap": {
            "defaultGizmoType": "video",
            "items": "data",
            "preview": {
              "title": "title",
              "details": "details",
              "image": "images.small",
              "id": "id"
            },
            "gizmo": {
              "_url_source": "https://codepen.io/fchazal/embed/<%= id %>/?theme-id=0&default-tab=html,result&embed-version=2",
              "id": "id",
              "image": "images.large",
              "title": "title",
              "caption": "details",
              "description": "details"
            }
          }
        }
      }
    }
  }';
  $tmp = json_decode($jsonstring);
  array_push($json, $tmp);
  return $json;
}

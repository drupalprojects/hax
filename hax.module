<?php
/**
 * @file
 * Headless Authoring eXperience, all we do is accept calls and make things haxable in the first place.
 */

/**
 * Implements hook_perm().
 */
function hax_perm() {
  return array('use hax');
}

/**
 * Implements hook_menu().
 */
function hax_menu() {
  $items = array();
  $items['hax-node-save/%node/%'] = array(
    'page callback' => '_hax_node_save',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'access callback' => '_hax_node_access',
    'access arguments' => array('update', 1),
  );
  $items['node/%node/hax'] = array(
    'title' => 'HAX authoring',
    'description' => 'Edit the node with HAX',
    'page callback' => '_hax_node_form',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'access callback' => '_hax_node_access',
    'access arguments' => array('update', 1),
  );
  return $items;
}

/**
 * Callback to save just the body field.
 */
function _hax_node_save($node, $token) {
  // ensure we had data PUT here and it is valid
  if ($_SERVER['REQUEST_METHOD'] == 'PUT' && drupal_valid_token($token, 'hax')) {
    // load the data from input stream
    $body = file_get_contents("php://input");
    $node->body = $body;
    node_save($node);
    // send back happy headers
    drupal_set_header("Content-Type: application/json");
    // define status
    drupal_set_header("Status: 200");

    $return = array(
      'status' => 200,
      'message' => t('Save successful!'),
      'data' => $node,
    );
    // output the response as json
    print json_encode($return);
    // bail early
    exit;
  }
}

/**
 * Permission + Node access check.
 */
function _hax_node_access($op, $node) {
  if (user_access('use hax') && node_access($op, $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Present the node form but wrap the content in hax-body tag
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function _hax_node_form($node) {
  // set page title
  drupal_set_title(t('HAX edit @title', array('@title' => $node->title)));
  // fake a component to get it into the head of the document, heavy weighting
  $component = new stdClass();
  $component->machine_name = 'cms-hax';
  $component->file = drupal_get_path('module', 'hax') . '/bower_components/cms-hax/cms-hax.html';
  _webcomponents_add_to_head($component, 10000);
  // @todo need support for these to get added dynamically by the module
  $elements = array('video-player', 'wikipedia-query', 'pdf-element', 'lrn-table', 'media-image');
  $components = '';
  foreach ($elements as $element) {
    $components .= '<' . $element . ' slot="autoloader">' . '</' . $element . '>';
  }
  // write content to screen, wrapped in tag to do all the work
  $content = '
  <cms-hax end-point="' . base_path() . 'hax-node-save/' . $node->nid . '/' . drupal_get_token('hax') . '">
    <div slot="body">' .   check_markup($node->body, $node->format) . '</div>
  </cms-hax>';
  return $content;
}
